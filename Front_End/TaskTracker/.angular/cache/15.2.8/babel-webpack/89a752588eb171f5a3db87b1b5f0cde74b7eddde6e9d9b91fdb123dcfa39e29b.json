{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nimport { AlertdialogComponent } from '../alertdialog/alertdialog.component';\nlet HomeComponent = class HomeComponent {\n  constructor(taskService, formBuilder, dialog, router) {\n    this.taskService = taskService;\n    this.formBuilder = formBuilder;\n    this.dialog = dialog;\n    this.router = router;\n    this.taskCreationVisible = false;\n    this.showViewTasks = false;\n    this.actionVisible = false;\n    this.btnvisible = true;\n  }\n  ngOnInit() {\n    this.todoForm = this.formBuilder.group({\n      task: ['', Validators.required],\n      dueDate: [''],\n      priority: ['']\n    });\n  }\n  showTaskCreation() {\n    this.taskCreationVisible = true;\n    this.showViewTasks = true;\n    this.actionVisible = true;\n    this.btnvisible = false;\n  }\n  get task() {\n    return this.todoForm.get('task');\n  }\n  isFormValid() {\n    const formControls = this.todoForm.controls;\n    for (const controlName in formControls) {\n      if (formControls.hasOwnProperty(controlName) && formControls[controlName].value === '') {\n        return false;\n      }\n    }\n    return true;\n  }\n  openAlert() {\n    this.dialogRef = this.dialog.open(AlertdialogComponent, {\n      width: '300px',\n      data: {\n        message: 'Please fill all fields.'\n      } // Pass any additional data to the dialog\n    });\n  }\n\n  onSubmit() {\n    this.openAlert();\n    if (!this.isFormValid()) {\n      this.openAlert();\n      return;\n    }\n    console.log(this.todoForm.value);\n    this.taskService.addTasks(this.todoForm.value).subscribe(data => {\n      alert(\"data added success!\");\n      console.log(data);\n    }, error => {\n      alert(\"error\");\n    });\n  }\n  showTasks() {\n    this.router.navigate(['/view-tasks']);\n  }\n};\nHomeComponent = __decorate([Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})], HomeComponent);\nexport { HomeComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAAQ,gBAAgB;AAKnE,SAASC,oBAAoB,QAAQ,sCAAsC;AASpE,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAQVC,YAAoBC,WAAuB,EAASC,WAAwB,EAAUC,MAAiB,EAASC,MAAa;IAAzG,gBAAW,GAAXH,WAAW;IAAqB,gBAAW,GAAXC,WAAW;IAAuB,WAAM,GAANC,MAAM;IAAoB,WAAM,GAANC,MAAM;IALpI,wBAAmB,GAAY,KAAK;IACpC,kBAAa,GAAS,KAAK;IAC3B,kBAAa,GAAS,KAAK;IAC3B,eAAU,GAAS,IAAI;EAKT;EACAC,QAAQ;IACF,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACJ,WAAW,CAACK,KAAK,CAAC;MACrCC,IAAI,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACY,QAAQ,CAAC;MAC/BC,OAAO,EAAE,CAAC,EAAE,CAAC;MACbC,QAAQ,EAAE,CAAC,EAAE;KAEd,CAAC;EACR;EACdC,gBAAgB;IACd,IAAI,CAACC,mBAAmB,GAAG,IAAI;IAC/B,IAAI,CAACC,aAAa,GAAC,IAAI;IACvB,IAAI,CAACC,aAAa,GAAC,IAAI;IACvB,IAAI,CAACC,UAAU,GAAC,KAAK;EACvB;EAEA,IAAIR,IAAI;IACN,OAAO,IAAI,CAACF,QAAQ,CAACW,GAAG,CAAC,MAAM,CAAC;EAClC;EAEAC,WAAW;IACT,MAAMC,YAAY,GAAG,IAAI,CAACb,QAAQ,CAACc,QAAQ;IAC3C,KAAK,MAAMC,WAAW,IAAIF,YAAY,EAAE;MACtC,IAAIA,YAAY,CAACG,cAAc,CAACD,WAAW,CAAC,IAAIF,YAAY,CAACE,WAAW,CAAC,CAACE,KAAK,KAAK,EAAE,EAAE;QACtF,OAAO,KAAK;;;IAGhB,OAAO,IAAI;EACb;EAGAC,SAAS;IACP,IAAI,CAACC,SAAS,GAAG,IAAI,CAACtB,MAAM,CAACuB,IAAI,CAAC5B,oBAAoB,EAAE;MACtD6B,KAAK,EAAE,OAAO;MACdC,IAAI,EAAE;QAAEC,OAAO,EAAE;MAAyB,CAAE,CAAC;KAC9C,CAAC;EACJ;;EAEAC,QAAQ;IACN,IAAI,CAACN,SAAS,EAAE;IAChB,IAAI,CAAC,IAAI,CAACN,WAAW,EAAE,EAAE;MACvB,IAAI,CAACM,SAAS,EAAE;MAChB;;IAEFO,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1B,QAAQ,CAACiB,KAAK,CAAC;IAChC,IAAI,CAACtB,WAAW,CAACgC,QAAQ,CAAC,IAAI,CAAC3B,QAAQ,CAACiB,KAAK,CAAC,CAACW,SAAS,CACrDN,IAAU,IAAI;MACbO,KAAK,CAAC,qBAAqB,CAAC;MAC5BJ,OAAO,CAACC,GAAG,CAACJ,IAAI,CAAC;IACnB,CAAC,EACAQ,KAAK,IAAG;MAEPD,KAAK,CAAC,OAAO,CAAC;IAChB,CAAC,CACF;EAEH;EAEAE,SAAS;IACP,IAAI,CAACjC,MAAM,CAACkC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;EACvC;CAED;AAzEYvC,aAAa,eALzBH,SAAS,CAAC;EACT2C,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,uBAAuB;EACpCC,SAAS,EAAE,CAAC,sBAAsB;CACnC,CAAC,GACW1C,aAAa,CAyEzB;SAzEYA,aAAa","names":["Component","Validators","AlertdialogComponent","HomeComponent","constructor","taskService","formBuilder","dialog","router","ngOnInit","todoForm","group","task","required","dueDate","priority","showTaskCreation","taskCreationVisible","showViewTasks","actionVisible","btnvisible","get","isFormValid","formControls","controls","controlName","hasOwnProperty","value","openAlert","dialogRef","open","width","data","message","onSubmit","console","log","addTasks","subscribe","alert","error","showTasks","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\235789\\Documents\\angular\\TaskTracker\\TaskTracker\\src\\app\\home\\home.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\nimport { Router } from '@angular/router';\nimport { AlertdialogComponent } from '../alertdialog/alertdialog.component';\nimport { Task } from '../task';\nimport { TaskService } from '../task.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements  OnInit{\n  dialogRef!: MatDialogRef<any>;\n\n  taskCreationVisible: boolean = false;\n  showViewTasks:boolean=false;\n  actionVisible:boolean=false;\n  btnvisible:boolean=true;\n  todoForm!: FormGroup;\n                constructor(private taskService:TaskService,private formBuilder: FormBuilder, private dialog: MatDialog,private router:Router)\n                {\n\n                }\n                ngOnInit() {\n                      this.todoForm = this.formBuilder.group({\n                        task: ['', Validators.required],\n                        dueDate: [''],\n                        priority: [''],\n                       \n                      });\n                }\n  showTaskCreation() {\n    this.taskCreationVisible = true;\n    this.showViewTasks=true;\n    this.actionVisible=true;\n    this.btnvisible=false;\n  }\n\n  get task() {\n    return this.todoForm.get('task');\n  }\n\n  isFormValid() {\n    const formControls = this.todoForm.controls;\n    for (const controlName in formControls) {\n      if (formControls.hasOwnProperty(controlName) && formControls[controlName].value === '') {\n        return false;\n      }\n    }\n    return true;\n  }\n  \n\n  openAlert() {\n    this.dialogRef = this.dialog.open(AlertdialogComponent, {\n      width: '300px', // Customize the width as per your needs\n      data: { message: 'Please fill all fields.' } // Pass any additional data to the dialog\n    });\n  }\n\n  onSubmit(){\n    this.openAlert();\n    if (!this.isFormValid()) {\n      this.openAlert();\n      return;\n    }\n    console.log(this.todoForm.value);\n    this.taskService.addTasks(this.todoForm.value).subscribe(\n      (data: Task) => {\n        alert(\"data added success!\");\n        console.log(data);\n      },\n      (error)=>\n      {\n        alert(\"error\");\n      }\n    );\n    \n  }\n\n  showTasks(){\n    this.router.navigate(['/view-tasks']);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}